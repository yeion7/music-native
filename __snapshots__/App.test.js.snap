// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`renders test  render App component 1`] = `
<View
  style={
    Object {
      "flex": 1,
      "height": 667,
    }
  }
  virtual={undefined}
>
  <View>
    <View
      rounded={true}
      searchBar={true}
      style={
        Object {
          "backgroundColor": "#F8F8F8",
          "borderBottomColor": "#a7a6ab",
          "borderBottomWidth": 0.5,
          "elevation": 3,
          "flexDirection": "row",
          "height": 64,
          "justifyContent": "center",
          "left": 0,
          "paddingLeft": 10,
          "paddingRight": 10,
          "paddingTop": 15,
          "right": 0,
          "shadowColor": undefined,
          "shadowOffset": undefined,
          "shadowOpacity": undefined,
          "shadowRadius": undefined,
          "top": 0,
        }
      }
      virtual={undefined}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hitSlop={undefined}
        isTVSelectable={true}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "alignItems": "center",
            "alignSelf": "center",
            "backgroundColor": "#CECDD2",
            "borderBottomWidth": 1,
            "borderColor": "transparent",
            "borderLeftWidth": 0,
            "borderRadius": 25,
            "borderRightWidth": 0,
            "borderTopWidth": 0,
            "flex": 1,
            "flexDirection": "row",
            "height": 30,
            "justifyContent": "flex-start",
            "marginLeft": 2,
            "opacity": 1,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
        />
        <TextInput
          autoCorrect={false}
          editable={true}
          onChangeText={[Function]}
          placeholder="Search"
          placeholderTextColor="#575757"
          style={
            Object {
              "alignSelf": "center",
              "color": "#000",
              "flex": 1,
              "fontSize": 17,
              "height": 30,
              "lineHeight": 24,
              "paddingLeft": 5,
              "paddingRight": 5,
              "top": 1.5,
            }
          }
          underlineColorAndroid="rgba(0,0,0,0)"
          virtual={undefined}
        />
      </View>
    </View>
  </View>
  <ScrollView
    automaticallyAdjustContentInsets={false}
    contentInset={
      Object {
        "bottom": 0,
      }
    }
    enableAutoAutomaticScroll={true}
    enableResetScrollToCoords={true}
    extraHeight={75}
    extraScrollHeight={0}
    keyboardDismissMode="interactive"
    onScroll={[Function]}
    resetScrollToCoords={
      Object {
        "x": 0,
        "y": 0,
      }
    }
    scrollEventThrottle={0}
    showsVerticalScrollIndicator={true}
    style={
      Object {
        "backgroundColor": "transparent",
        "flex": 1,
      }
    }
    virtual={undefined}
  >
    <View
      style={
        Array [
          Object {
            "alignItems": "center",
            "flexBasis": 0,
            "flexGrow": 1,
            "flexShrink": 1,
            "height": 533.6,
            "justifyContent": "center",
          },
          undefined,
        ]
      }
    >
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
        style={
          Array [
            Object {
              "fontSize": 50,
            },
            undefined,
          ]
        }
      >
        ðŸŽ§
      </Text>
      <Text
        accessible={true}
        allowFontScaling={true}
        ellipsizeMode="tail"
      >
        Busca tu canciÃ³n favorita
      </Text>
    </View>
  </ScrollView>
  <View />
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    supportedOrientations={null}
    transparent={true}
    visible={false}
  >
    <View
      style={
        Object {
          "flex": 1,
          "justifyContent": "flex-start",
          "margin": 20,
        }
      }
    >
      <View
        danger={false}
        style={
          Object {
            "alignItems": "center",
            "backgroundColor": "rgba(0,0,0,0.8)",
            "borderRadius": 5,
            "flexDirection": "row",
            "justifyContent": "space-between",
            "minHeight": 50,
            "paddingBottom": 10,
            "paddingLeft": 10,
            "paddingRight": 10,
            "paddingTop": 10,
          }
        }
        success={false}
        virtual={undefined}
        warning={false}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#fff",
              "flex": 1,
              "fontFamily": "System",
              "fontSize": 16,
            }
          }
          virtual={undefined}
        />
      </View>
    </View>
  </Modal>
  <Modal
    animationType="fade"
    hardwareAccelerated={false}
    onRequestClose={[Function]}
    transparent={true}
    visible={false}
  >
    <View
      accessibilityComponentType={undefined}
      accessibilityLabel={undefined}
      accessibilityTraits={undefined}
      accessible={true}
      hitSlop={undefined}
      isTVSelectable={true}
      onLayout={undefined}
      onResponderGrant={[Function]}
      onResponderMove={[Function]}
      onResponderRelease={[Function]}
      onResponderTerminate={[Function]}
      onResponderTerminationRequest={[Function]}
      onStartShouldSetResponder={[Function]}
      style={
        Object {
          "backgroundColor": "rgba(0,0,0,0.4)",
          "flex": 1,
          "justifyContent": "flex-end",
          "opacity": 1,
        }
      }
      testID={undefined}
      tvParallaxProperties={undefined}
    >
      <View
        accessibilityComponentType={undefined}
        accessibilityLabel={undefined}
        accessibilityTraits={undefined}
        accessible={true}
        hitSlop={undefined}
        isTVSelectable={true}
        onLayout={undefined}
        onResponderGrant={[Function]}
        onResponderMove={[Function]}
        onResponderRelease={[Function]}
        onResponderTerminate={[Function]}
        onResponderTerminationRequest={[Function]}
        onStartShouldSetResponder={[Function]}
        style={
          Object {
            "backgroundColor": "#fff",
            "elevation": 4,
            "height": NaN,
            "opacity": 1,
            "padding": 15,
          }
        }
        testID={undefined}
        tvParallaxProperties={undefined}
      >
        <Text
          accessible={true}
          allowFontScaling={true}
          ellipsizeMode="tail"
          style={
            Object {
              "color": "#757575",
              "fontFamily": "System",
              "fontSize": 16,
            }
          }
          virtual={undefined}
        />
        <ScrollView
          dataArray={Array []}
          dataSource={
            ListViewDataSource {
              "items": 0,
            }
          }
          enableEmptySections={true}
          initialListSize={10}
          onContentSizeChange={[Function]}
          onEndReachedThreshold={1000}
          onKeyboardDidHide={undefined}
          onKeyboardDidShow={undefined}
          onKeyboardWillHide={undefined}
          onKeyboardWillShow={undefined}
          onLayout={[Function]}
          onScroll={[Function]}
          pageSize={1}
          removeClippedSubviews={true}
          renderRow={[Function]}
          scrollEventThrottle={50}
          scrollRenderAheadDistance={1000}
          stickyHeaderIndices={Array []}
          stickySectionHeadersEnabled={true}
          style={
            Object {
              "marginHorizontal": -15,
              "marginTop": 15,
            }
          }
          virtual={undefined}
        />
      </View>
    </View>
  </Modal>
</View>
`;
